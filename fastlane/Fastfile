# SPDX-License-Identifier: ice License 1.0

require 'json'

default_platform(:ios)

MATCH_GIT_URL = ENV["MATCH_GIT_URL"]
FIREBASE_DISTRIBUTION_TOKEN = ENV["FIREBASE_DISTRIBUTION_TOKEN"]
ANDROID_BUILD_TYPE = ENV["ANDROID_BUILD_TYPE"]

def delete_temp_keychain(name)
    delete_keychain(
      name: name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
    create_keychain(
        name: name,
        password: password,
        unlock: false,
        timeout: 3000,
    )
end

def ensure_temp_keychain(name, password)
    delete_temp_keychain(name)
    create_temp_keychain(name, password)
end

platform :ios do
    desc "Bump iOS version"
    lane :bump_version do |options|
        xcodeproj = "./ios/ice.xcodeproj"
        version_number = options[:version_number] || "0.0.0"
        next_build_number = options[:build_number]

        raise "Version number is not provided." if version_number.nil?

        if next_build_number.nil?
            puts "Please specify new build number: "
            next_build_number = STDIN.gets.chomp
            raise "Build number should be int." if next_build_number.nil? || next_build_number.scan(/\d+/).length == 0
        end

        puts "Setting build number to #{next_build_number}".yellow
        puts "Setting version to #{version_number}".yellow

        increment_build_number(
            build_number: next_build_number,
            xcodeproj: xcodeproj,
        )

        increment_version_number(
            version_number: version_number,
            xcodeproj: xcodeproj,
        )

    end

    desc "Build iOS app"
    lane :build do |options|
        temp_keystore_user = 'match_keystore_user'
        temp_keystore_password = 'match_keystore_password'
        xcodeproj = "./ios/ice.xcodeproj"
        google_app_id = get_info_plist_value(path: "./ios/GoogleService-Info.plist", key: "GOOGLE_APP_ID")
        main_bundle_id = get_xcconfig_value(
            path: './ios/Configurations/ice.custom.xcconfig',
            name: 'PRODUCT_BUNDLE_IDENTIFIER'
        )
        ns_bundle_id = get_xcconfig_value(
            path: './ios/NotificationService/NotificationService.custom.xcconfig',
            name: 'PRODUCT_BUNDLE_IDENTIFIER'
        )
        sign_type = options[:sign_type]
        export_method = options[:sign_type] == "appstore" ? "app-store" : "ad-hoc"

        ensure_temp_keychain(temp_keystore_user, temp_keystore_password)

        cocoapods(
            podfile: "./ios/Podfile",
            clean_install: true,
        )

        match(
            type: sign_type,
            readonly: true,
            app_identifier: [main_bundle_id, ns_bundle_id],
            keychain_name: temp_keystore_user,
            keychain_password: temp_keystore_password,
            api_key_path: "./configuration/appstore-connect-key.json",
            git_url: MATCH_GIT_URL
        )

        update_code_signing_settings(
            use_automatic_signing: false,
            path: xcodeproj
        )

        update_project_provisioning(
            xcodeproj: xcodeproj,
            target_filter: 'ice',
            # autogenerated env variable from match lane
            profile:ENV["sigh_#{main_bundle_id}_#{sign_type}_profile-path"],
            build_configuration: "Release"
        )

        update_project_provisioning(
            xcodeproj: xcodeproj,
            target_filter: 'NotificationService',
            # autogenerated env variable from match lane
            profile:ENV["sigh_#{ns_bundle_id}_#{sign_type}_profile-path"],
            build_configuration: "Release"
        )

        gym(
            configuration: "Release",
            workspace: "./ios/ice.xcworkspace",
            export_method: export_method,
        )
    end

    desc "Deploy iOS app"
    lane :deploy do |options|
        deploy_retry = 0
        google_app_id = get_info_plist_value(path: "./ios/GoogleService-Info.plist", key: "GOOGLE_APP_ID")
        main_bundle_id = get_info_plist_value(path: "./ios/ice/Info.plist", key: "CFBundleIdentifier")

        begin
            case options[:target]
            when "testflight"
                pilot(
                    app_identifier: main_bundle_id,
                    skip_waiting_for_build_processing: true,
                    api_key_path: "./configuration/appstore-connect-key.json",
                    skip_submission: true,
                    distribute_external: false,
                    notify_external_testers: false,
                )
            when "firebase"
                firebase_app_distribution(
                    app: google_app_id,
                    firebase_cli_token: FIREBASE_DISTRIBUTION_TOKEN,
                    release_notes: options[:release_notes] || git_branch,
                    groups: "Internal-testers",
                )
            end
        rescue => exception
            deploy_retry +=1
            if deploy_retry <= 3
                puts "Retrying because of #{exception}".yellow
                retry
            else
                raise exception
            end
        end
    end
end

platform :android do
    desc "Bump Android version"
    lane :bump_version do |options|
        build_gradle = "./android/app/build.gradle"
        version_number = options[:version_number] || "0.0.0"
        next_build_number = options[:build_number]

        raise "Version number is not provided." if version_number.nil?

        if next_build_number.nil?
            puts "Please specify new build number: "
            next_build_number = STDIN.gets.chomp
            raise "Build number should be int." if next_build_number.nil? || next_build_number.scan(/\d+/).length == 0
        end

        puts "Setting build number to #{next_build_number}".yellow
        puts "Setting version to #{version_number}".yellow

        increment_version_code(
            version_code: next_build_number,
            gradle_file_path: build_gradle,
        )

        increment_version_name(
            version_name: version_number,
            gradle_file_path: build_gradle,
        )

    end

    desc "Build Android app"
    lane :build do |options|
        case options[:type]
        when "bundle"
            gradle(
                project_dir: "android",
                task: "clean bundle#{ANDROID_BUILD_TYPE.capitalize()}"
            )
        when "apk"
            # use bundles when the app is published
            gradle(
                project_dir: "android",
                task: "clean assemble#{ANDROID_BUILD_TYPE.capitalize()}"
            )
        end
    end

    desc "Deploy Android app"
    lane :deploy do |options|
        deploy_retry = 0
        google_services_file = File.open "../android/app/google-services.json"
        google_services_data = JSON.load google_services_file
        google_app_id = google_services_data["client"][0]["client_info"]["mobilesdk_app_id"]
        package_name = google_services_data["client"][0]["client_info"]["android_client_info"]["package_name"]
        google_services_file.close

        begin
            case options[:target]
            when "playstore"
                upload_to_play_store(
                    package_name: package_name,
                    track: "internal",
                    aab: "android/app/build/outputs/bundle/#{ANDROID_BUILD_TYPE}/app-#{ANDROID_BUILD_TYPE}.aab",
                    json_key: "configuration/gp-console.json",
                    skip_upload_metadata: true,
                    skip_upload_images: true,
                    skip_upload_screenshots: true,
                    skip_upload_apk: true,
                    # remove as soon as the app is not draft anymore
                    release_status: 'draft',
                )
            when "firebase"
                # use bundles when the app is published
                firebase_app_distribution(
                    app: google_app_id,
                    firebase_cli_token: FIREBASE_DISTRIBUTION_TOKEN,
                    android_artifact_type: "APK",
                    android_artifact_path: "android/app/build/outputs/apk/#{ANDROID_BUILD_TYPE}/app-#{ANDROID_BUILD_TYPE}.apk",
                    release_notes: options[:release_notes] || git_branch,
                    groups: "Internal-testers",
                )
            end
        rescue => exception
                deploy_retry +=1
            if deploy_retry <= 3
                puts "Retrying because of #{exception}".yellow
                retry
            else
                raise exception
            end
        end
    end
end

