Exposes the OAuthProvider methods for authorization with variety of providers without the need of 3rd party libs.
Might be removed when any of the similar PR's are merged:
https://github.com/invertase/react-native-firebase/pull/7187
https://github.com/invertase/react-native-firebase/pull/7019

diff --git a/node_modules/@react-native-firebase/auth/android/src/main/java/io/invertase/firebase/auth/ReactNativeFirebaseAuthModule.java b/node_modules/@react-native-firebase/auth/android/src/main/java/io/invertase/firebase/auth/ReactNativeFirebaseAuthModule.java
index c79417f..711b289 100644
--- a/node_modules/@react-native-firebase/auth/android/src/main/java/io/invertase/firebase/auth/ReactNativeFirebaseAuthModule.java
+++ b/node_modules/@react-native-firebase/auth/android/src/main/java/io/invertase/firebase/auth/ReactNativeFirebaseAuthModule.java
@@ -30,6 +30,7 @@ import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.bridge.WritableArray;
 import com.facebook.react.bridge.WritableMap;
 import com.google.android.gms.tasks.OnCompleteListener;
+import com.google.android.gms.tasks.Task;
 import com.google.firebase.FirebaseApp;
 import com.google.firebase.FirebaseException;
 import com.google.firebase.FirebaseNetworkException;
@@ -320,6 +321,42 @@ class ReactNativeFirebaseAuthModule extends ReactNativeFirebaseModule {
             });
   }
 
+  @ReactMethod
+  public void signInWithProvider(String appName, final String providerId, final Promise promise) {
+    FirebaseApp firebaseApp = FirebaseApp.getInstance(appName);
+    FirebaseAuth firebaseAuth = FirebaseAuth.getInstance(firebaseApp);
+    OAuthProvider.Builder provider = OAuthProvider.newBuilder(providerId);
+    provider.addCustomParameter("lang", firebaseAuth.getLanguageCode());
+    Task<AuthResult> pendingResultTask = firebaseAuth.getPendingAuthResult();
+    if (pendingResultTask != null) {
+      pendingResultTask
+        .addOnSuccessListener(
+          authResult -> {
+            Log.d(TAG, "authTwitter:pendingResultTask->onComplete:success");
+            promiseWithAuthResult(authResult, promise);
+          })
+        .addOnFailureListener(
+          exception -> {
+            Log.d(TAG, "authTwitter:pendingResultTask->onComplete:failure", exception);
+            promiseRejectAuthException(promise, exception);
+          });
+    } else {
+      Activity activity = getCurrentActivity();
+      firebaseAuth
+        .startActivityForSignInWithProvider(activity, provider.build())
+        .addOnSuccessListener(
+          authResult -> {
+            Log.d(TAG, "authTwitter:startActivityForSignInWithProvider->onComplete:success");
+            promiseWithAuthResult(authResult, promise);
+          })
+        .addOnFailureListener(
+          exception -> {
+            Log.d(TAG, "authTwitter:startActivityForSignInWithProvider->onComplete:failure", exception);
+            promiseRejectAuthException(promise, exception);
+          });
+    }
+  }
+
   /**
    * createUserWithEmailAndPassword
    *
diff --git a/node_modules/@react-native-firebase/auth/ios/RNFBAuth/RNFBAuthModule.m b/node_modules/@react-native-firebase/auth/ios/RNFBAuth/RNFBAuthModule.m
index 8d98dc5..84869f6 100644
--- a/node_modules/@react-native-firebase/auth/ios/RNFBAuth/RNFBAuthModule.m
+++ b/node_modules/@react-native-firebase/auth/ios/RNFBAuth/RNFBAuthModule.m
@@ -57,6 +57,8 @@
 static __strong NSMutableDictionary<NSString *, FIRMultiFactorResolver *> *cachedResolver;
 static __strong NSMutableDictionary<NSString *, FIRMultiFactorSession *> *cachedSessions;
 
+static __strong FIROAuthProvider *authProvider;
+
 @implementation RNFBAuthModule
 #pragma mark -
 #pragma mark Module Setup
@@ -213,6 +215,36 @@ - (void)invalidate {
       }];
 }
 
+RCT_EXPORT_METHOD(signInWithProvider
+                  : (FIRApp *)firebaseApp
+                  : (NSString *)providerId
+                  : (RCTPromiseResolveBlock)resolve
+                  : (RCTPromiseRejectBlock)reject) {
+    authProvider = [FIROAuthProvider providerWithProviderID:providerId];
+
+    NSString* lang = [FIRAuth authWithApp:firebaseApp].languageCode;
+
+    [authProvider setCustomParameters:@{@"lang": lang}];
+
+    [authProvider getCredentialWithUIDelegate:nil
+                                   completion:^(FIRAuthCredential *_Nullable credential, NSError *_Nullable error) {
+        if (error) {
+            [self promiseRejectAuthException:reject error:error];
+            return;
+        }
+        if (credential) {
+            [[FIRAuth auth] signInWithCredential:credential
+                                      completion:^(FIRAuthDataResult *_Nullable authResult, NSError *_Nullable error) {
+                if (error) {
+                    [self promiseRejectAuthException:reject error:error];
+                    return;
+                }
+                [self promiseWithAuthResult:resolve rejecter:reject authResult:authResult];
+            }];
+        }
+    }];
+}
+
 RCT_EXPORT_METHOD(signInWithEmailAndPassword
                   : (FIRApp *)firebaseApp
                   : (NSString *)email
diff --git a/node_modules/@react-native-firebase/auth/lib/index.d.ts b/node_modules/@react-native-firebase/auth/lib/index.d.ts
index ab41d09..870e32a 100644
--- a/node_modules/@react-native-firebase/auth/lib/index.d.ts
+++ b/node_modules/@react-native-firebase/auth/lib/index.d.ts
@@ -1540,6 +1540,25 @@ export namespace FirebaseAuthTypes {
      */
     signInAnonymously(): Promise<UserCredential>;
 
+    /**
+     * Signs in the user using web-based generic OAuth Login.
+     *
+     * Triggers the {@link auth#onAuthStateChanged} listener.
+     *
+     * #### Example
+     *
+     * ```js
+     * const userCredential = await firebase.auth().signInWithProvider('twitter.com');
+     * ```
+     * 
+     * @error auth/web-context-already-presented Thrown if another web operation is still in progress.
+     * @error auth/web-context-canceled Thrown if the pending operation was canceled by the user.
+     * @error auth/web-storage-unsupported Thrown if the browser is not supported, or when 3rd party cookies or data are disabled in the browser.
+     * @error auth/web-internal-error Thrown if there was a problem that occurred inside of the web widget that hosts the operation.
+     * @param providerId Might be "apple.com", "twitter.com", "github.com", "microsoft.com" or "yahoo.com"
+     */
+    signInWithProvider(providerId: 'apple.com' | 'twitter.com' | 'github.com' | 'microsoft.com' | 'yahoo.com'): Promise<UserCredential>;
+
     /**
      * Signs in the user using their phone number.
      *
diff --git a/node_modules/@react-native-firebase/auth/lib/index.js b/node_modules/@react-native-firebase/auth/lib/index.js
index ea45f05..ed96fa4 100644
--- a/node_modules/@react-native-firebase/auth/lib/index.js
+++ b/node_modules/@react-native-firebase/auth/lib/index.js
@@ -231,6 +231,12 @@ class FirebaseAuthModule extends FirebaseModule {
       .then(userCredential => this._setUserCredential(userCredential));
   }
 
+  signInWithProvider(providerId) {
+    return this.native
+      .signInWithProvider(providerId)
+      .then(userCredential => this._setUserCredential(userCredential));
+  }
+
   signInWithPhoneNumber(phoneNumber, forceResend) {
     if (isAndroid) {
       return this.native
